{"version":3,"sources":["containers/logo.png","components/Option.js","components/OptionList.js","components/Back.js","containers/Numbers.js","components/Body.js","containers/App.js","serviceWorker.js","index.js"],"names":["module","exports","Option","name","click","className","onClick","OptionList","Back","Numbers","props","getMessage","num","type","a","fetch","resp","json","data","text","this","setState","message","onSearchChange","event","number","target","value","state","onClickChange","document","getElementsByTagName","lis","querySelectorAll","li","style","backgroundColor","getAttribute","placeholder","onChange","id","React","Component","Body","display","console","log","App","api","logoSize","src","require","alt","height","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.3e076f08.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.e9326a81.png\";","import React from 'react';\r\nimport './Option.css'\r\n\r\nfunction Option({name, click}) {\r\n    return(\r\n        <button className='tc dib br3 grow bw2 shadow-5 sans-serif box' onClick={() => click(name)}>\r\n            <h1>{name}</h1>\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default Option;","import React from 'react';\r\nimport Option from './Option';\r\n\r\nfunction OptionList({click}) {\r\n    return(\r\n        <div className='tc'>\r\n            <Option name='Numbers API' click={click}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default OptionList;\r\n","import React from 'react';\r\nimport './Back.css'\r\n\r\nfunction Back({click}) {\r\n    return (\r\n        <button \r\n            className='ma3 pa3 grow btn' \r\n            onClick={() => click('Options')}>\r\n                Back\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default Back;","import React from 'react';\r\nimport Back from '../components/Back'\r\nimport './Numbers.css';\r\n\r\nclass Numbers extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            number: 0,\r\n            type: 'trivia',\r\n            message: ''\r\n        };\r\n        this.click = props.click;\r\n    };\r\n\r\n    getMessage = async function (num, type) {\r\n        const resp = await fetch(`http://numbersapi.com/${num}/${type}?json`);\r\n        const data = await resp.json();\r\n        const text = data.text\r\n\r\n        this.setState({ message: text })\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getMessage(this.state.number, this.state.type)\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        let number = event.target.value\r\n        number = !number ? '0' : number\r\n        this.setState({ number: number });\r\n\r\n        this.getMessage(number, this.state.type);\r\n    }\r\n\r\n    onClickChange = (type) => {\r\n        let number = this.state.number\r\n        if ((type === 'date') && (this.state.type !== 'date')) {\r\n            number = '10/21'\r\n            document.getElementsByTagName('input')[0].value = ''\r\n        } else if ((type !== 'date') && (this.state.type === 'date')) {\r\n            number = '0'\r\n            document.getElementsByTagName('input')[0].value = ''\r\n        }\r\n\r\n        this.setState({type : type})\r\n        \r\n        const lis = document.querySelectorAll('li')\r\n        for (let li of lis) {\r\n            li.style.backgroundColor = \r\n                (li.getAttribute('id') === type) ?\r\n                '#d5d6ee' : '#aaabbc';\r\n        }\r\n\r\n\r\n        this.setState({number : number})\r\n\r\n        this.getMessage(number, type);\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className='tc dib br4 ba um'>\r\n                <h1>Numbers API</h1>\r\n\r\n                <div className='tc'>\r\n                    <input\r\n                        className='pa3 ba br3 b--green bg-lightest-blue tc search'\r\n                        type=\"search\"\r\n                        placeholder={this.state.number}\r\n                        onChange={this.onSearchChange}\r\n                    />\r\n                </div>\r\n\r\n                <div>\r\n                    <ul className='list tcz'>\r\n                        <li id='trivia' style={{backgroundColor : '#cdcee4'}}>\r\n                            <button onClick={() => this.onClickChange('trivia')}>Trivia Fact</button>\r\n                        </li>\r\n                        <li id='math'>\r\n                            <button onClick={() => this.onClickChange('math')}>Math Fact</button>\r\n                        </li>\r\n                        <li id='year'>\r\n                            <button onClick={() => this.onClickChange('year')}>Year Fact</button>\r\n                        </li>\r\n                        <li id='date'>\r\n                            <button onClick={() => this.onClickChange('date')}>Date Fact</button>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n\r\n                <h3 className='pa2 ma2'>{this.state.message}</h3>\r\n\r\n                <Back click={this.click} />\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Numbers;","import React from 'react';\r\nimport OptionList from './OptionList';\r\nimport Numbers from '../containers/Numbers'\r\n\r\nfunction Body({display, click}) {\r\n    switch(display) {\r\n        case 'Options':\r\n            return <OptionList click={click}/> \r\n        \r\n        case 'Numbers API':\r\n            return (\r\n                <div className='tc sans-serif ma2'>\r\n                    <Numbers click={click}/>\r\n                </div>\r\n            );\r\n        \r\n        default:\r\n            console.log(display);\r\n            return <h1>Something went wrong!</h1> ;\r\n    }\r\n\r\n}\r\n\r\nexport default Body;","import React from 'react';\nimport Body from '../components/Body';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      display : 'Options',\n      logoSize : 300\n    };\n  }\n\n  onClickChange = (api) => {\n    this.setState({display : api})\n\n    if (api === 'Options') {\n      this.setState({logoSize : 300})\n    } else {\n      this.setState({logoSize : 100})\n    }\n  }\n\n  render() {\n    return(\n      <>\n        <div className='tc sans-serif f3 ma1'>\n          <img src={require('./logo.png')} alt=\"Logo\" height={this.state.logoSize}/>\n          <h5>This site communicates with Numbers API and displays its response</h5>\n        </div>\n\n        <Body display={this.state.display} click={this.onClickChange}/>\n      </>\n    );\n  }\n\n}\n\nexport default App;\n ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}